import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray50,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return appTheme.whiteA700;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return appTheme.whiteA700;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray400,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: colorScheme.errorContainer.withOpacity(1),
          fontSize: 15.fSize,
          fontFamily: 'Almarai',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray80003,
          fontSize: 11.fSize,
          fontFamily: 'Almarai',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 40.fSize,
          fontFamily: 'Almarai',
          fontWeight: FontWeight.w800,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.errorContainer.withOpacity(1),
          fontSize: 24.fSize,
          fontFamily: 'Almarai',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 12.fSize,
          fontFamily: 'Almarai',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 20.fSize,
          fontFamily: 'Almarai',
          fontWeight: FontWeight.w800,
        ),
        titleMedium: TextStyle(
          color: colorScheme.errorContainer.withOpacity(1),
          fontSize: 16.fSize,
          fontFamily: 'Almarai',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 14.fSize,
          fontFamily: 'Almarai',
          fontWeight: FontWeight.w800,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFF06200),
    primaryContainer: Color(0XFF231F20),
    secondaryContainer: Color(0X3FF06200),

    // Error colors
    errorContainer: Color(0X19000000),
    onError: Color(0XFF999999),
    onErrorContainer: Color(0XFF2C2C2C),

    // On colors(text colors)
    onPrimary: Color(0XFF181818),
    onPrimaryContainer: Color(0XFFB9B9B9),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF040404);
  Color get black90001 => Color(0XFF020202);
  Color get black90002 => Color(0XFF0A0A0A);
  Color get black90003 => Color(0XFF030303);
  Color get black90004 => Color(0XFF080808);

  // BlueGray
  Color get blueGray100 => Color(0XFFCCCCCC);
  Color get blueGray10001 => Color(0XFFD5D5D5);
  Color get blueGray10002 => Color(0XFFD2D2D2);
  Color get blueGray10003 => Color(0XFFD9D9D9);
  Color get blueGray10004 => Color(0XFFD4D4D4);
  Color get blueGray400 => Color(0XFF8E8E8E);
  Color get blueGray50 => Color(0XFFF1F1F1);
  Color get blueGray900 => Color(0XFF353535);

  // DeepOrange
  Color get deepOrange100 => Color(0XFFFFDBC3);
  Color get deepOrange10001 => Color(0XFFE0C8B8);

  // Gray
  Color get gray100 => Color(0XFFF6F6F6);
  Color get gray10001 => Color(0XFFF3F3F3);
  Color get gray200 => Color(0XFFECECEC);
  Color get gray300 => Color(0XFFE1E1E1);
  Color get gray30001 => Color(0XFFE3E3E3);
  Color get gray400 => Color(0XFFB5B5B5);
  Color get gray40001 => Color(0XFFB4B4B4);
  Color get gray40002 => Color(0XFFC9C9C9);
  Color get gray40003 => Color(0XFFB3B3B3);
  Color get gray50 => Color(0XFFFFFAFB);
  Color get gray500 => Color(0XFF9C9C9C);
  Color get gray50001 => Color(0XFF919191);
  Color get gray50002 => Color(0XFFACACAC);
  Color get gray50003 => Color(0XFF959595);
  Color get gray600 => Color(0XFF6E6E6E);
  Color get gray60001 => Color(0XFF6C6C6C);
  Color get gray60002 => Color(0XFF737373);
  Color get gray60003 => Color(0XFF7F7F7F);
  Color get gray60004 => Color(0XFF6F6F6F);
  Color get gray60005 => Color(0XFF7C7C7C);
  Color get gray60006 => Color(0XFF7E7E7E);
  Color get gray700 => Color(0XFF5A5A5A);
  Color get gray70001 => Color(0XFF686868);
  Color get gray800 => Color(0XFF4D4D4D);
  Color get gray80001 => Color(0XFF444444);
  Color get gray80002 => Color(0XFF424242);
  Color get gray80003 => Color(0XFF474747);
  Color get gray80004 => Color(0XFF3A3A3A);
  Color get gray80066 => Color(0X663C3C3C);
  Color get gray900 => Color(0XFF272727);
  Color get gray90001 => Color(0XFF242424);
  Color get gray90002 => Color(0XFF1F1F1F);
  Color get gray90003 => Color(0XFF292929);

  // Grayf
  Color get gray9007f => Color(0X7F262626);

  // Green
  Color get greenA700 => Color(0XFF08DA10);

  // Red
  Color get redA700 => Color(0XFFE60000);
  Color get redA70001 => Color(0XFFE70101);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
